--============================================================================
-- STRP 模板引擎 - 常量定义模块
-- 
-- 集中管理模板引擎的所有常量配置：
-- • 关键字定义：控制结构的开始和结束标记
-- • 性能参数：缓存大小、循环限制等
-- • 语法配置：标记符号、分隔符等
-- 
-- 设计目标：
-- • 易于维护：所有配置集中管理
-- • 易于扩展：添加新语法时只需修改此文件
-- • 性能优化：合理的默认值和限制
--============================================================================

---@class StrpConstants 常量定义模块
local M = {}

--============================================================================
-- 语法关键字定义
--============================================================================

--- 开启新块的关键字映射表
--- 
--- 这些关键字会开启一个新的代码块，需要相应的结束关键字来闭合。
--- 支持嵌套使用，解析器会正确处理嵌套层级。
--- 
---@type table<string, boolean>
M.BLOCK_KEYWORDS = {
    -- 条件控制
    ["if"] = true,       -- 条件判断：{% if condition %}...{% endif %}
    ["unless"] = true,   -- 反向条件：{% unless condition %}...{% endunless %}
    
    -- 循环控制  
    ["for"] = true,      -- 遍历循环：{% for item in list %}...{% endfor %}
    ["while"] = true,    -- 条件循环：{% while condition %}...{% endwhile %}
    
    -- 分支控制
    ["switch"] = true,   -- 多分支选择：{% switch value %}...{% endswitch %}
    
    -- 作用域控制
    ["with"] = true,     -- 局部作用域：{% with expr as var %}...{% endwith %}
    
    -- 错误处理
    ["try"] = true,      -- 异常处理：{% try %}...{% catch %}...{% endtry %}
    
    -- 代码复用
    ["macro"] = true,    -- 宏定义：{% macro name(args) %}...{% endmacro %}
}

--- 结束块的关键字映射表
--- 
--- 与 BLOCK_KEYWORDS 一一对应，用于闭合相应的代码块。
--- 解析器通过这些关键字确定块的边界。
--- 
---@type table<string, boolean>
M.END_KEYWORDS = {
    -- 通用结束标记
    ["end"] = true,        -- 通用结束：可以结束任何块
    
    -- 特定结束标记（更明确，推荐使用）
    ["endif"] = true,      -- 结束 if 块
    ["endunless"] = true,  -- 结束 unless 块
    ["endfor"] = true,     -- 结束 for 块
    ["endwhile"] = true,   -- 结束 while 块
    ["endswitch"] = true,  -- 结束 switch 块
    ["endwith"] = true,    -- 结束 with 块
    ["endtry"] = true,     -- 结束 try 块
    ["endmacro"] = true,   -- 结束 macro 块
}

--============================================================================
-- 性能和安全限制
--============================================================================

--- 最大循环迭代次数
--- 
--- 防止无限循环导致程序卡死。当 while 循环超过此次数时，
--- 会抛出错误并终止执行。
--- 
--- 注意：这是一个安全限制，不是性能优化。正常业务逻辑
--- 应该避免接近这个限制。
--- 
---@type integer
M.MAX_LOOP_ITERATIONS = 10000

--- 最大模板缓存大小
--- 
--- 限制编译后模板的缓存数量，避免内存无限增长。
--- 当缓存达到此大小时，会触发 LRU 清理，删除一半缓存。
--- 
--- 建议值：
--- - 小型应用：50-100
--- - 中型应用：200-500  
--- - 大型应用：1000+
--- 
---@type integer
M.MAX_CACHE_SIZE = 100

--- 最大递归深度
--- 
--- 防止模板递归包含或宏调用导致栈溢出。
--- include 和宏调用会检查此限制。
--- 
---@type integer
M.MAX_RECURSION_DEPTH = 50

--- 最大变量路径长度
--- 
--- 限制 ${obj.prop.subprop...} 的最大层级数，
--- 防止恶意或错误的深层嵌套访问。
--- 
---@type integer
M.MAX_PROPERTY_DEPTH = 20

--============================================================================
-- 语法标记配置
--============================================================================

--- 模板标记配置
--- 
--- 定义模板中各种标记的格式，便于统一修改和扩展。
--- 
---@class TemplateSyntax
M.SYNTAX = {
    -- 变量标记：${variable}
    VARIABLE_START = "${",
    VARIABLE_END = "}",
    
    -- 控制标记：{% tag %}
    CONTROL_START = "{%",
    CONTROL_END = "%}",
    
    -- 注释标记：{# comment #}
    COMMENT_START = "{#",
    COMMENT_END = "#}",
    
    -- 过滤器分隔符：variable|filter
    FILTER_SEPARATOR = "|",
    
    -- 参数分隔符：filter:arg 或 filter(arg1,arg2)
    PARAM_SEPARATOR = ":",
    PARAM_START = "(",
    PARAM_END = ")",
    PARAM_DELIMITER = ",",
}

--============================================================================
-- 错误消息模板
--============================================================================

--- 常用错误消息模板
--- 
--- 统一错误消息格式，提升用户体验和调试效率。
--- 
---@type table<string, string>
M.ERROR_MESSAGES = {
    SYNTAX_ERROR = "语法错误: %s",
    UNDEFINED_VARIABLE = "未定义的变量: %s",
    UNDEFINED_FILTER = "未定义的过滤器: %s", 
    UNDEFINED_MACRO = "未定义的宏: %s",
    INFINITE_LOOP = "检测到无限循环，已终止执行",
    RECURSION_LIMIT = "递归深度超过限制 (%d)",
    TYPE_ERROR = "类型错误: 期望 %s，实际 %s",
    CACHE_FULL = "模板缓存已满，正在清理",
}

--============================================================================
-- 调试和开发配置
--============================================================================

--- 调试模式配置
--- 
--- 在开发环境中启用更详细的错误信息和性能监控。
--- 生产环境建议关闭以提升性能。
--- 
---@class DebugConfig
M.DEBUG = {
    -- 是否启用调试模式
    ENABLED = false,
    
    -- 是否记录性能指标
    PROFILE = false,
    
    -- 是否显示未知标签警告
    WARN_UNKNOWN_TAGS = false,
    
    -- 是否验证模板语法
    VALIDATE_SYNTAX = true,
}

--============================================================================
-- 特性开关
--============================================================================

--- 功能特性开关
--- 
--- 控制各种高级特性的启用状态，便于渐进式启用新功能
--- 或在出现问题时快速关闭某些特性。
--- 
---@class FeatureFlags
M.FEATURES = {
    -- 是否启用宏功能
    MACROS = true,
    
    -- 是否启用高级过滤器
    ADVANCED_FILTERS = true,
    
    -- 是否启用错误处理（try-catch）
    ERROR_HANDLING = true,
    
    -- 是否启用缓存功能
    CACHING = true,
    
    -- 是否启用性能优化
    PERFORMANCE_OPTIMIZATIONS = true,
}

return M
